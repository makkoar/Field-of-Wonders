<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Error_AnswerCannotBeEmpty" xml:space="preserve">
    <value>Answer text cannot be empty.</value>
  </data>
  <data name="Error_DispatcherUnhandledException_Format" xml:space="preserve">
    <value>An error occurred in the UI thread: {0}</value>
  </data>
  <data name="Error_QuestionCannotBeEmpty" xml:space="preserve">
    <value>Question text cannot be empty.</value>
  </data>
  <data name="Error_UnexpectedInitializationFailed_Format" xml:space="preserve">
    <value>Unexpected error during main window initialization: {0}</value>
  </data>
  <data name="Error_UnhandledException_Format" xml:space="preserve">
    <value>Unhandled exception: {0}</value>
  </data>
  <data name="Error_UnhandledException_NoExceptionObject" xml:space="preserve">
    <value>An unhandled error occurred without additional details.</value>
  </data>
  <data name="Log_AppExiting" xml:space="preserve">
    <value>Exiting application with code {0}.</value>
  </data>
  <data name="Log_ApplyingCulture_Success" xml:space="preserve">
    <value>Culture '{0}' applied successfully.</value>
  </data>
  <data name="Log_CultureApplied" xml:space="preserve">
    <value>Culture {0} successfully applied to threads.</value>
  </data>
  <data name="Log_FlushingLogs" xml:space="preserve">
    <value>Flushing log buffers before closing...</value>
  </data>
  <data name="Log_GetResourceSetFailed_Format" xml:space="preserve">
    <value>Failed to get resource set for culture '{0}'.</value>
  </data>
  <data name="Log_LoadSettings_IOException_Format" xml:space="preserve">
    <value>I/O error loading settings file '{0}': {1}.</value>
  </data>
  <data name="Log_LoadSettings_ReadFailed_Format" xml:space="preserve">
    <value>Error deserializing or reading settings file '{0}': {1}. File might be corrupt.</value>
  </data>
  <data name="Log_LoadSettings_Unexpected_Format" xml:space="preserve">
    <value>Unexpected error loading settings from file '{0}': {1}.</value>
  </data>
  <data name="Log_MainWindowInitialized" xml:space="preserve">
    <value>Main window initialized successfully.</value>
  </data>
  <data name="Log_MainWindowOpening" xml:space="preserve">
    <value>Opening main window...</value>
  </data>
  <data name="Log_NeutralCultureAdded_Format" xml:space="preserve">
    <value>Neutral culture detected and added: {0}</value>
  </data>
  <data name="Log_PlayerNameDefault_Format" xml:space="preserve">
    <value>Player name not entered, using default name: '{0}'.</value>
  </data>
  <data name="Log_PlayerScoreAdded_Format" xml:space="preserve">
    <value>Player '{0}' scored {1} points. Current score: {2} (was {3}).</value>
  </data>
  <data name="Log_PlayerScoreReset_Format" xml:space="preserve">
    <value>Player '{0}' score reset (was {1}).</value>
  </data>
  <data name="Log_SaveSettings_DirectoryNotFound_Format" xml:space="preserve">
    <value>Could not determine directory for saving settings file: {0}.</value>
  </data>
  <data name="Log_SaveSettings_IOException_Format" xml:space="preserve">
    <value>I/O error saving settings file '{0}': {1}.</value>
  </data>
  <data name="Log_SaveSettings_Unauthorized_Format" xml:space="preserve">
    <value>Access error saving settings file '{0}'. Check write permissions.</value>
  </data>
  <data name="Log_SaveSettings_Unexpected_Format" xml:space="preserve">
    <value>Unexpected error saving settings: {0}.</value>
  </data>
  <data name="Log_SettingsFileDeleted" xml:space="preserve">
    <value>Settings file '{0}' deleted (e.g., because it was empty or corrupt).</value>
  </data>
  <data name="Log_SettingsFileDeleteFailed" xml:space="preserve">
    <value>Failed to delete settings file '{0}'.</value>
  </data>
  <data name="Log_SettingsLoaded" xml:space="preserve">
    <value>Settings loaded successfully from file '{0}'.</value>
  </data>
  <data name="Log_SettingsSaved" xml:space="preserve">
    <value>Settings saved successfully to file '{0}'.</value>
  </data>
  <data name="Log_SpecificCultureAdded_Format" xml:space="preserve">
    <value>Specific culture detected and added: {0}</value>
  </data>
  <data name="Log_UnhandledExceptionAppDomain" xml:space="preserve">
    <value>Unhandled exception in AppDomain. Terminating: {0}.</value>
  </data>
  <data name="Log_UnhandledExceptionAppDomain_NoException" xml:space="preserve">
    <value>Unhandled exception in AppDomain without Exception object. Terminating: {0}.</value>
  </data>
  <data name="Log_UnhandledExceptionDispatcher" xml:space="preserve">
    <value>Unhandled exception in Dispatcher (UI thread).</value>
  </data>
  <data name="MainWindow_Title" xml:space="preserve">
    <value>Field of Wonders</value>
  </data>
  <data name="Player_DefaultName" xml:space="preserve">
    <value>Player</value>
  </data>
</root>